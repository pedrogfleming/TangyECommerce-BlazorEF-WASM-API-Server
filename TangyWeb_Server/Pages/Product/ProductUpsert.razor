@page "/product/create"
@page "/product/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>
    <div class="col-md-10">
        @if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    @*https://blazor.syncfusion.com/documentation/rich-text-editor/getting-started*@
                    @*<SfRichTextEditor @bind-Value="Product.Description"></SfRichTextEditor>*@
                    @*https://mudblazor.com/components/textfield#select-range*@
                    @*<MudTextField  @bind-value="Product.Description" T="string"/>*@
                    <InputText @bind-Value="Product.Description" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Category</label>
                        <div class="form-check">
                            <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                                <option value="0" disabled="disabled" selected=>--Select Category--</option>
                                @foreach (var cat in Categories)
                                {
                                <option value="@cat.Id">@cat.Name</option>
                                }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                    </div>

                </div>
                <div class="form-group pt-4 col-6">
                    <InputFile OnChange="HandleImageUpLoad"></InputFile>
                </div>
            </div>

            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100">
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new()
        {
            ImageUrl = "/images/product/default.png"
        };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }
    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        //Display the loading spinner gif
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //Update
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        //We hide the loading spinner gif and then show the product searched
        IsLoading = false;
        StateHasChanged();
    }
    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            //create
            await _productRepository.Create(Product);
            await _jsRuntime.ToastrSuccess("Product created successfully");
        }
        else
        {
            //update
            if (OldImageUrl != Product.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _productRepository.Update(Product);
            await _jsRuntime.ToastrSuccess("Product updated successfully");
        }
        _navigationManager.NavigateTo("product");
    }
    private async Task HandleImageUpLoad(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                    fileInfo.Extension.ToLower() == ".png" ||
                    fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/ .jpeg/ .png file only");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {

            await _jsRuntime.ToastrError(ex.Message);
        }
    }
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";

}
